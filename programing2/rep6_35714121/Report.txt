プログラミングII 第6回レポート
学籍番号:35714121
氏名:福富 隆大

以下，提出ファイル，プログラム，実行方法と結果の説明
lesson13-1
(1)x
(2)o
(3)o
(4)x
(5)x
(6)o
(7)o
(8)x
(9)o

lesson13-2
mainメソッドにある例外処理をmyAssignメソッドに移した。
myAssign(myarray, 1, 0);とmyAssign(myarray, 100, 0);を実行すると修正前と同じように前者は実行できたが、後者が実行できなかった。

lesson13-3
try-catchを三つ作りそれぞれのcatchでどのメソッドの例外かわかるように修正した。
また、e.printStackTraceを使ってどの部分で例外が起きているのか分かるように修正した。

lesson13-4
修正前のコードはずっと再起呼び出しがされていたので桁数がintを超えてしまいエラーが出たと思われる。
なのでnの値で場合分けをして終端条件を設定した。

lesson13-5
実行結果
`javac ExceptionQuiz.java
java ExceptionQuiz
START
代入します。
catch(1)
finally
END`
配列aは要素数が3なのにaの4つめの要素に代入しているのでエラーになる。
配列の範囲を超えた例外ArrayIndexOutOfBoundsExceptionはRuntimeExceptionの拡張クラスなので、１つめのcatchが実行されてそれ以降は実行されない
なのでcatch(2)は表示されず、catch(1)だけが表示されている。
また、finallyはメソッドがから抜け出す前に常に処理され、帯域脱出でも実行されるのでこのような実行結果になっている。
なのでエラーが出て、catchされた後でもfinallyが表示されている。

kadai1
プログラム修正前のエラー
・内容
`javac TextToUpper.java TextToUpperTester.java
TextToUpper.java:8: エラー: 例外FileNotFoundExceptionは報告されません。スローするには、捕捉または宣言する必要があります
        Scanner scanner = new Scanner(new File(filename));
                          ^
エラー1個
make: *** [TextToUpper.class] Error 1`

・原因となる箇所
TextToUpperTesterの "TextToUpper.readAndConvert("sample.txt");"

・その理由
filenameというファイルがないのに開こうとしているから

エラー解消のために例外(FileNotFoundException)を投げtesterクラスでキャッチしたエラー
・内容
javac TextToUpper.java TextToUpperTester.java
mv foobar.txt foobar_bak.txt
echo "testing data" > foobar.txt
java TextToUpperTester
ファイルが見つかりません
java.io.FileNotFoundException: foo.txt (No such file or directory)
rm -f foobar.txt
java TextToUpperTester
ファイルが見つかりません
java.io.FileNotFoundException: foo.txt (No such file or directory)
mv foobar_bak.txt foobar.txt

・原因となる箇所
TextToUpperTester.javaの "TextToUpper.readAndConvert("sample.txt");"
Makefileの　"test: $(CLASS)
	- mv foobar.txt foobar_bak.txt
	echo "testing data" > foobar.txt
	$(JAVA) $(MAIN)
	rm -f foobar.txt
	$(JAVA) $(MAIN)
	- mv foobar_bak.txt foobar.txt

$(CLASS): $(SRC)
	$(JAVAC) $(SRC)"

・その理由
sample.textというファイルがないのに開こうとしているのでエラーが出て、それをキャッチしているのでファイルが見つかりませんとエラーの内容が表示されている(二度実行しているので二度エラーが出ている)
それ以外の部分はMakefileの設定でfoobar.textをfoobar_bak.textに名前を変えて、新しいfoobar.textを作りそれに”testing data”と書いてTextToUpperTester.javaを実行し、foobar.textを削除してもう一度TextToUpperTester.javaを実行しfoobar_bak.textをfoobar.textに名前を変えているのでそのコマンドが表示されている

・"foobar.txt"をクラスファイルと同じディレクトリに置いた時の実行結果
mv foobar.txt foobar_bak.txt
echo "testing data" > foobar.txt
java TextToUpperTester
TESTING DATA
rm -f foobar.txt
java TextToUpperTester
ファイルが見つかりません
java.io.FileNotFoundException: foobar.txt (No such file or directory)
mv foobar_bak.txt foobar.txt

・その理由
Makefileで定義されている部分は"エラー解消のために例外(FileNotFoundException)を投げtesterクラスでキャッチ"した時と同じだが、今回はfoobar.textを探しているため一度目がファイルが見つかりませんではなくTESTING DATAとなっていて正常に動作している。しかし、再度TextToUpperTester.javaが呼び出される時はその直前でfoobar.textが削除されるため必ずエラーが出るのでそれをキャッチして、ファイルが見つかりませんと表示されるようになっている。
これは課題文にある"両者の動作が出力から確認できるプログラムを作成せよ．"のために設定されているはずなのでエラーが出ているがそのままにしている。

"foobar.txt"をクラスファイルと違うディレクトリに置いた時の実行結果
mv foobar.txt foobar_bak.txt
mv: rename foobar.txt to foobar_bak.txt: No such file or directory
make: [test] Error 1 (ignored)
echo "testing data" > foobar.txt
java TextToUpperTester
TESTING DATA
rm -f foobar.txt
java TextToUpperTester
ファイルが見つかりません
java.io.FileNotFoundException: foobar.txt (No such file or directory)
mv foobar_bak.txt foobar.txt
mv: rename foobar_bak.txt to foobar.txt: No such file or directory
make: [test] Error 1 (ignored)

・その理由
Makefileで定義されている部分は"エラー解消のために例外(FileNotFoundException)を投げtesterクラスでキャッチ"した時と同じだが、foobar.textがないためエラーが出ていて、それを無視して次のコマンドを実行している。そのため
"mv: rename foobar_bak.txt to foobar.txt: No such file or directory
make: [test] Error 1 (ignored)"
とmvコマンドでfoobar.textを操作しようとしている時に表示され、それ以外は"foobar.txt"をクラスファイルと同じディレクトリに置いた時の実行結果と同じである(理由も同じである)

kadai2
NotNaturalNumberクラスは独自の例外クラスで問題文の通りのコンストラクタのみ持っている
RangeAddクラスはaからbまでの整数をすべて合計するaddメソッドのみを持つ
addはまずaとbがそれぞれ負かどうかを判定してもし負なら独自に定義した例外を投げる
その後aとbの大きい方をhigh小さい方をlowに入れているそしてfor文でaからbまで合計している
for文の外で合計を入れる変数sumを定義して初期値をlowにしているためaとbが同じでfor文が一度も使われなくても大丈夫なようになっている
RangeAddTesterクラスはtry-catch文でAddメソッドが投げたエラーを受け取っている

考察:
例外はjavaで最初から用意されているものを使っても、自分で新たに(既存のもののサブクラスとして)作るのも可能
例外にも種類と階層があり、チェックされるものとされないものがある。
例外が出ると処理が中断されてしまうがfinallyを使うと例外が起きても処理することができる
catchの引数にあるeは例外クラスのインスタンスで例外を投げるというのは例外クラスのインスタンスを投げている
throwsを使うことでチェックされる例外もチェックされない例外として扱える、これによって普通はコンパイル時にエラーになってしまうものもメソッドの外に投げることができる
kadai1でfoobar.textの中身ではなくTESTING DATAという分が大文字になっている理由はkadai1の実行結果の説明で書いた通りだが、make testではなくjava TextToUpperTester foobar.txtとするとMakefileで定義されているコマンドが実行されないのでちゃんとfoobar.textの中身が大文字になって表示された

教えてあげた人:いない

自己評価:S