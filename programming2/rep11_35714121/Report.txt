プログラミングII 第11回レポート
学籍番号:35714121
氏名:福富 隆大

以下，提出ファイル，プログラム，実行方法と結果の説明

kadai
フィボナッチ数列を求めるメソッドを使う前後にSystem.currentTimeMillis();で時間を保存しておき、その差を使って実行時間を求めた
再起法ではnが２以下では１を返し、それ以外では再起呼び出しを用いて求めている
動的計画法でもnが２以下では１を返し、それ以外ではn番目までのフィボナッチ数列を求めそれを配列に入れる(メモ化する)ことで高速化している
実行結果は以下の通りだった
java FiboRec 40
FiboRec(40) = 102334155
処理時間: 151ミリ秒
java FiboDP 40
FiboDP(40) = 102334155
処理時間: 0ミリ秒
動的計画法では瞬時に計算が終わっているのに対して、再起法ではかなり時間がかかっている
n=40でこの差なのでnが大きくなるとかなりの差が生まれてしまう
evalfibo.shを実行してみると(自分のmacで実行した)n=21まで再起法も実行時間が0ミリ秒だった

kadai2
evalkp.shは”java KP < input/${i}.txt > output/kpout${i}.txt”をi=1~30までループさせている
Solver.javaは配列で表を作り、表を使う形でアルゴリズムを組んだ
KP.javaはScannerで値を読み最初の値と次の値をnumとcapacityにし、それ以降をweightとvalueに入れている

考察:
配列を用いて動的計画法のプログラムを作ることを通して配列とfor文などが組み合わさったコードを上手く扱えるようになった。
特にfor分が0から始まるのか1から始まるのかや、増やすのか減らすのかによって指定する配列の場所がずれてくるので、正しい場所を指定できているかを丁寧に確かめた。
また、コードを設計する時点で変数の意味などを踏まえてfor文の変数部分の書き方の方針を決めておくのが大切だと感じた。

教えてあげた人:いない

自己評価:S
