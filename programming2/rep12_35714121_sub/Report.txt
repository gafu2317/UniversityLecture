プログラミングII 第11回レポート
学籍番号:35714121
氏名:福富 隆大

以下，提出ファイル，プログラム，実行方法と結果の説明

kadai1
loadGraphでは、入力がすでに(ノード番号):(隣接ノード),(隣接ノード),…となっているので:と,で分けて適切な配列などに格納している
printGraphでは、loadGraphで格納したものを元の順でPrintしている

kadai2
getBFSTreeは指定されたルートノードからの幅優先探索木を生成する。
このメソッドはまずルートノードをキューに追加し、その後キューが空になるまで以下の処理を繰り返す
キューの先頭のノードを取り出し、そのノードのすべての未訪問の隣接ノードをキューに追加する
この過程で各ノードの親ノードのインデックスを記録する
結果はこの親ノードのインデックスを格納した配列として返される

getShortestPathは指定された開始ノードから終了ノードまでの最短経路を計算する
このメソッドはまずgetBFSTree(start)メソッドを呼び出して幅優先探索木を生成し、その後終了ノードから開始ノードまでの経路を逆順にたどる
この過程で経路上のノードのインデックスを記録する
結果はこのノードのインデックスを格納した配列として返される

kadai3
DFSTreeのコンストラクタはDFSの実行状態を追跡するためのvisited配列と、各ノードの親ノードを追跡するためのparent配列を初期化する

getDFSTreeメソッドは、指定されたルートノードからDFSを開始する。visitedとparent配列をリセットした後、DFSメソッドを呼び出す

DFSメソッドは、まず指定されたノードからDFSを実行し、現在のノードを訪問済みとマークする。次に、現在のノードのすべての隣接ノードに対して、未訪問であれば再帰的にDFSを実行します。

getPathメソッドは、指定された2つのノード間の経路を求めます。まず、getDFSTreeメソッドを呼び出してDFS木を取得します。その後、終点から始点までの経路をparent配列を使って逆順に追跡し、その結果をリストとして返します。

Makefile
実行パーミッションを付与してからシェルコマンドを実行している
例
	chmod +x kadai1.sh
	./kadai1.sh
またoutputフォルダの中身を消すrm1コマンドも作成した

考察
デジタル構造とアルゴリズムで学んだBFSとDBSを手を動かして探索するときは連結ノードが多いと大変だが、アルゴリズムをプログラムするとどれだけ大きくてもすぐに実行できた
今回はファイルを読み込む時に読み込めない場合を考慮して例外処理をを組み込んで適切に対応できるようにした
今回の内容ではないが、配列の長さをよく変えたので改めてArrayListの使い勝手の良さを実感した
make zipでzipファイルを作ろうとした時ScanTest.javaというファイルがあることに気がついた
中身を見てみるとファイルを読み込みノードと隣接ノードに分けるクラスのようだが、課題は自分でファイルを読み込みノードと隣接ノードに分けるプログラムを書くことだと判断したのでScanTestクラスは使っていない

教えてあげた人:いない

自己評価:S
